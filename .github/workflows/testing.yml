name: Automated Testing Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'bugfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests nightly at 2 AM UTC
    - cron: '0 2 * * *'

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Unit Tests - Frontend
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend-unit
        name: frontend-unit-coverage

  # Unit Tests - Backend
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --junit-xml=test-results.xml
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-unit-test-results
        path: |
          backend/test-results.xml
          backend/htmlcov/
          backend/coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend-unit
        name: backend-unit-coverage

  # Integration Tests - Backend
  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run database migrations
      run: |
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v \
          --cov=app \
          --cov-append \
          --cov-report=xml \
          --junit-xml=integration-test-results.xml
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: test

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-integration-test-results
        path: |
          backend/integration-test-results.xml
          backend/coverage.xml

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests, backend-unit-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000

    - name: Start backend server
      run: |
        cd backend
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        ENVIRONMENT: test

    - name: Start frontend server
      run: |
        cd frontend
        npm start &
        sleep 10
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000

    - name: Install Playwright
      run: |
        cd frontend
        npx playwright install --with-deps

    - name: Run E2E tests
      run: |
        cd frontend
        npx playwright test
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build and start application
      run: |
        cd frontend
        npm run build
        npm start &
        sleep 15
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v12
      with:
        configPath: './frontend/.lighthouserc.js'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: Load testing with Artillery
      run: |
        npm install -g artillery
        artillery quick --count 10 --num 5 http://localhost:3000

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit safety semgrep

    - name: Run Bandit security scan
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-results.json
      continue-on-error: true

    - name: Run Safety check
      run: |
        cd backend
        safety check --json --output safety-results.json
      continue-on-error: true

    - name: Run Semgrep scan
      run: |
        semgrep --config=auto backend/app/ frontend/src/ --json --output=semgrep-results.json
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-results.json
          safety-results.json
          semgrep-results.json

  # Test Report Generation
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests, backend-unit-tests, backend-integration-tests, e2e-tests, performance-tests, security-tests]
    if: always()

    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v4

    - name: Generate comprehensive test report
      run: |
        echo "# Test Execution Report" > test-report.md
        echo "## Test Summary" >> test-report.md
        echo "- Frontend Unit Tests: ${{ needs.frontend-unit-tests.result }}" >> test-report.md
        echo "- Backend Unit Tests: ${{ needs.backend-unit-tests.result }}" >> test-report.md
        echo "- Backend Integration Tests: ${{ needs.backend-integration-tests.result }}" >> test-report.md
        echo "- End-to-End Tests: ${{ needs.e2e-tests.result }}" >> test-report.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-report.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-report.md

    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-report
        path: test-report.md

    - name: Comment test results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('test-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
