reference code for ui creation by chatgpt

Absolutely! Here’s a **complete implementation guide** with **code, file structure, and clear explanations** for building this **Enterprise Insights Copilot UI** using **Next.js + TailwindCSS + shadcn/ui**. This will help copilots (and you) spin up the exact dashboard layout shown in your image—**from scratch in VS Code**.

---

# 🚀 **Enterprise Insights Copilot Dashboard – Implementation Guide**

---

## **🎯 1. Overview / Description**

This dashboard features:

* **Glassmorphic, two-column layout** on a dark background.
* **Left column:**

  * “Upload your Data” card with drag-and-drop/file picker UI.
  * “Ask Copilot” card with input box and send button.
* **Right column:**

  * “Agent Workflow” panel—a vertical stack of agent cards, each with icon, name, and dropdown indicator.
* **Responsive, modern, minimal MAANG style.**

---

## **📂 2. File Structure**

```
/enterprise-insights-copilot
│
├── pages/
│   └── index.tsx
├── components/
│   ├── Dashboard.tsx
│   └── AgentList.tsx
├── styles/
│   └── globals.css
├── tailwind.config.js
├── package.json
└── ...
```

---

## **⚙️ 3. Install & Configure**

### **A. Create Next.js App**

```bash
npx create-next-app@latest enterprise-insights-copilot
cd enterprise-insights-copilot
```

### **B. Install Dependencies**

```bash
npm install tailwindcss postcss autoprefixer
npx tailwindcss init -p
npm install lucide-react @shadcn/ui
```

### **C. Tailwind Setup**

**Edit `tailwind.config.js`:**

```js
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {
      colors: {
        dark: "#181B20",
      },
      boxShadow: {
        glass: '0 8px 32px 0 rgba(31, 38, 135, 0.10)',
      },
      borderRadius: {
        xl: "1.25rem",
        '2xl': '1.5rem'
      }
    },
  },
  plugins: [],
}
```

**Edit `styles/globals.css`:**

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  background: #181B20;
  color: #fff;
  min-height: 100vh;
}
```

---

## **🧩 4. Core Components**

---

### **A. `components/AgentList.tsx`**

```tsx
// components/AgentList.tsx
import {
  Database, FileText, Settings, MessageCircle, BarChart,
  Lightbulb, FileChart, Wand2, Users, BookOpen, User, ChevronDown
} from "lucide-react";

const agentList = [
  { icon: <Database size={20} />, name: "Data Agent" },
  { icon: <FileText size={20} />, name: "Cleaner Agent" },
  { icon: <Settings size={20} />, name: "Planning Agent" },
  { icon: <MessageCircle size={20} />, name: "Query Agent" },
  { icon: <BarChart size={20} />, name: "SQL Agent" },
  { icon: <Lightbulb size={20} />, name: "Insight Agent" },
  { icon: <FileChart size={20} />, name: "Chart Agent" },
  { icon: <Wand2 size={20} />, name: "Critique Agent" },
  { icon: <Users size={20} />, name: "Debate Agent" },
  { icon: <BookOpen size={20} />, name: "Narrative Agent" },
  { icon: <User size={20} />, name: "Report Agent" },
];

export default function AgentList() {
  return (
    <div className="flex flex-col gap-3">
      {agentList.map(({ icon, name }) => (
        <div
          key={name}
          className="flex items-center justify-between bg-white/10 p-3 rounded-xl shadow-sm cursor-pointer hover:bg-white/20 transition"
        >
          <div className="flex items-center gap-2 text-white/80">
            {icon}
            <span>{name}</span>
          </div>
          <ChevronDown className="w-4 h-4 text-white/60" />
        </div>
      ))}
    </div>
  );
}
```

---

### **B. `components/Dashboard.tsx`**

```tsx
// components/Dashboard.tsx
import { useState } from "react";
import AgentList from "./AgentList";

export default function Dashboard() {
  const [input, setInput] = useState("");

  return (
    <div className="flex flex-row justify-center min-h-screen items-center gap-8 bg-dark">
      {/* Left Side */}
      <div className="flex flex-col gap-8 w-[350px]">
        <div className="backdrop-blur-xl bg-white/5 border-none shadow-glass rounded-2xl p-6">
          <h2 className="text-2xl font-bold text-white mb-4">Upload your Data</h2>
          <div className="bg-white/10 rounded-xl p-6 text-center text-gray-300 border border-white/10">
            Drag and drop a file here,<br />or click to browse
          </div>
          <div className="text-xs mt-3 text-gray-400 text-center">
            CSV and XLSX files are supported
          </div>
        </div>
        <div className="backdrop-blur-xl bg-white/5 border-none shadow-glass rounded-2xl p-6">
          <h2 className="text-2xl font-bold text-white mb-4">Ask Copilot</h2>
          <input
            className="bg-white/10 text-white/80 rounded-xl mb-4 p-3 w-full"
            placeholder="Type your analytics query..."
            value={input}
            onChange={e => setInput(e.target.value)}
          />
          <button className="w-full bg-blue-600 rounded-xl shadow-md hover:bg-blue-500 transition p-2 font-semibold">
            Send
          </button>
        </div>
      </div>
      {/* Right Side */}
      <div className="w-[400px] backdrop-blur-xl bg-white/5 border-none shadow-glass rounded-2xl p-6">
        <h2 className="text-2xl font-bold text-white mb-4">Agent Workflow</h2>
        <AgentList />
      </div>
    </div>
  );
}
```

---

### **C. `pages/index.tsx`**

```tsx
// pages/index.tsx
import Dashboard from "../components/Dashboard";

export default function Home() {
  return <Dashboard />;
}
```

---

## **💄 5. Glassmorphism Effects (Optional Enhancements)**

Add in `globals.css` for a more glassy look:

```css
.card-glass {
  background: rgba(255,255,255,0.06);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.11);
  backdrop-filter: blur(20px);
  border-radius: 1.5rem;
  border: 1px solid rgba(255,255,255,0.10);
}
```

Then use `className="card-glass ..."` for your card divs if you want even more shine.

---

## **🚦 6. Run & See Your Dashboard**

```bash
npm run dev
```

Go to [http://localhost:3000](http://localhost:3000).

---

## **🔗 7. Customization & Next Steps**

* **Implement real drag-and-drop upload** (e.g., `react-dropzone`)
* **Make agent cards expandable for logs**
* **Add Framer Motion for animations**
* **Theme toggling, responsive tweaks, backend integration**

---

# **Summary**

You now have the **full code and explanation** to build your **Enterprise Insights Copilot UI**—MAANG-style, glassmorphic, scalable, and ready for GenAI!

If you need drag-and-drop upload, live demo links, agent log popouts, or anything else, just ask!
-----------


Absolutely! Here is the **complete code for a static React/Next.js + Tailwind CSS frontend UI** that matches your reference image as closely as possible. This implementation provides all the structure and glassmorphic effects, using only open source tools (no external UI libraries required, but you can add [shadcn/ui](https://ui.shadcn.com/) or [lucide-react](https://lucide.dev/) if you want even more polish).

You’ll get:

* **Two columns:**

  * **Left:** “Upload your Data” (glass card), “Ask Copilot” (glass card)
  * **Right:** “Agent Workflow” (vertical stack of glassy agent dropdowns)
* **Dark glassmorphism, soft highlights, rounded corners, minimal MAANG style**

---

# 🛠️ 1. **Setup**

```bash
npx create-next-app@latest enterprise-insights-copilot
cd enterprise-insights-copilot
npm install tailwindcss postcss autoprefixer
npx tailwindcss init -p
npm install lucide-react
```

**In `tailwind.config.js`:**

```js
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        dark: "#181B20",
        glass: "rgba(255,255,255,0.06)",
      },
      boxShadow: {
        glass: "0 8px 32px 0 rgba(31, 38, 135, 0.13)",
      },
      borderRadius: {
        xl: "1.25rem",
        "2xl": "1.5rem",
      },
    },
  },
  plugins: [],
};
```

**In `styles/globals.css`:**

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  background: #181b20;
  color: #fff;
  min-height: 100vh;
}

.card-glass {
  background: rgba(255,255,255,0.07);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.18);
  backdrop-filter: blur(16px);
  border-radius: 1.5rem;
  border: 1px solid rgba(255,255,255,0.11);
}
```

---

# 🧩 2. **Components**

## **A. Agent List (components/AgentList.tsx)**

```tsx
import {
  Database, FileText, Settings, MessageCircle, BarChart,
  Lightbulb, FileChart, Wand2, Users, BookOpen, User, ChevronDown
} from "lucide-react";

const agentList = [
  { icon: <Database size={20} />, name: "Data Agent" },
  { icon: <FileText size={20} />, name: "Cleaner Agent" },
  { icon: <Settings size={20} />, name: "Planning Agent" },
  { icon: <MessageCircle size={20} />, name: "Query Agent" },
  { icon: <BarChart size={20} />, name: "SQL Agent" },
  { icon: <Lightbulb size={20} />, name: "Insight Agent" },
  { icon: <FileChart size={20} />, name: "Chart Agent" },
  { icon: <Wand2 size={20} />, name: "Critique Agent" },
  { icon: <Users size={20} />, name: "Debate Agent" },
  { icon: <BookOpen size={20} />, name: "Narrative Agent" },
  { icon: <User size={20} />, name: "Report Agent" },
];

export default function AgentList() {
  return (
    <div className="flex flex-col gap-3">
      {agentList.map(({ icon, name }) => (
        <div
          key={name}
          className="flex items-center justify-between bg-white/10 p-3 rounded-xl shadow-sm cursor-pointer hover:bg-white/20 transition"
        >
          <div className="flex items-center gap-2 text-white/80">
            {icon}
            <span>{name}</span>
          </div>
          <ChevronDown className="w-4 h-4 text-white/60" />
        </div>
      ))}
    </div>
  );
}
```

---

## **B. Dashboard Layout (components/Dashboard.tsx)**

```tsx
import { useState } from "react";
import AgentList from "./AgentList";

export default function Dashboard() {
  const [input, setInput] = useState("");

  return (
    <div className="flex flex-row justify-center min-h-screen items-center gap-8 bg-dark">
      {/* Left Side */}
      <div className="flex flex-col gap-8 w-[350px]">
        <div className="card-glass p-6">
          <h2 className="text-2xl font-bold text-white mb-4">Upload your Data</h2>
          <div className="bg-white/10 rounded-xl p-6 text-center text-gray-300 border border-white/10">
            Drag and drop a file here,<br />or click to browse
          </div>
          <div className="text-xs mt-3 text-gray-400 text-center">
            CSV and XLSX files are supported
          </div>
        </div>
        <div className="card-glass p-6">
          <h2 className="text-2xl font-bold text-white mb-4">Ask Copilot</h2>
          <input
            className="bg-white/10 text-white/80 rounded-xl mb-4 p-3 w-full"
            placeholder="Type your analytics query..."
            value={input}
            onChange={e => setInput(e.target.value)}
          />
          <button className="w-full bg-blue-600 rounded-xl shadow-md hover:bg-blue-500 transition p-2 font-semibold">
            Send
          </button>
        </div>
      </div>
      {/* Right Side */}
      <div className="card-glass w-[400px] p-6">
        <h2 className="text-2xl font-bold text-white mb-4">Agent Workflow</h2>
        <AgentList />
      </div>
    </div>
  );
}
```

---

## **C. Main Page (pages/index.tsx)**

```tsx
import Dashboard from "../components/Dashboard";

export default function Home() {
  return <Dashboard />;
}
```

---

# 🖥️ 3. **Usage**

* Put `AgentList.tsx` and `Dashboard.tsx` inside your `/components` folder.
* Put the CSS in `globals.css`.
* Run `npm run dev` and visit [http://localhost:3000](http://localhost:3000).
* The UI is static for demo. You can easily make agent dropdowns, drag/drop upload, or chat logic interactive!

---

# 📜 **Summary/Description**

* **Look & Feel:**
  Modern, glassmorphic, two-column layout.
  Left: Data upload (drag & drop area), chat input.
  Right: Agent workflow—each agent a glassy, rounded dropdown row.
  Everything is glassy, with blur, subtle shadow, and deep black background for a premium, MAANG-style dashboard.

* **Tech stack:**
  Next.js, TailwindCSS, Lucide React for icons. No external UI frameworks—easy to modify and expand.

---

**Need drag-and-drop, animations, backend connection, or fully working dropdowns? Let me know—I'll extend the code!**


-----------------------------



Here is the **full code** for the exact frontend UI in your image, using **Next.js** and **Tailwind CSS**.
Just copy-paste these files and your UI will look and feel like the screenshot!

---

## 1️⃣ `tailwind.config.js`

```js
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        dark: "#181B20",
      },
      boxShadow: {
        glass: "0 8px 32px 0 rgba(31, 38, 135, 0.13)",
      },
      borderRadius: {
        xl: "1.25rem",
        "2xl": "1.5rem",
      },
    },
  },
  plugins: [],
};
```

---

## 2️⃣ `styles/globals.css`

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  background: #181b20;
  color: #fff;
  min-height: 100vh;
}

.card-glass {
  background: rgba(255,255,255,0.07);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.18);
  backdrop-filter: blur(16px);
  border-radius: 1.5rem;
  border: 1px solid rgba(255,255,255,0.11);
}
```

---

## 3️⃣ `components/AgentList.tsx`

```tsx
import {
  Database, FileText, Settings, MessageCircle, BarChart,
  Lightbulb, FileChart, Wand2, Users, BookOpen, User, ChevronDown
} from "lucide-react";

const agentList = [
  { icon: <Database size={20} />, name: "Data Agent" },
  { icon: <FileText size={20} />, name: "Cleaner Agent" },
  { icon: <Settings size={20} />, name: "Planning Agent" },
  { icon: <MessageCircle size={20} />, name: "Query Agent" },
  { icon: <BarChart size={20} />, name: "SQL Agent" },
  { icon: <Lightbulb size={20} />, name: "Insight Agent" },
  { icon: <FileChart size={20} />, name: "Chart Agent" },
  { icon: <Wand2 size={20} />, name: "Critique Agent" },
  { icon: <Users size={20} />, name: "Debate Agent" },
  { icon: <BookOpen size={20} />, name: "Narrative Agent" },
  { icon: <User size={20} />, name: "Report Agent" },
];

export default function AgentList() {
  return (
    <div className="flex flex-col gap-3">
      {agentList.map(({ icon, name }) => (
        <div
          key={name}
          className="flex items-center justify-between bg-white/10 p-3 rounded-xl shadow-sm cursor-pointer hover:bg-white/20 transition"
        >
          <div className="flex items-center gap-2 text-white/80">
            {icon}
            <span>{name}</span>
          </div>
          <ChevronDown className="w-4 h-4 text-white/60" />
        </div>
      ))}
    </div>
  );
}
```

---

## 4️⃣ `components/Dashboard.tsx`

```tsx
import { useState } from "react";
import AgentList from "./AgentList";

export default function Dashboard() {
  const [input, setInput] = useState("");

  return (
    <div className="flex flex-row justify-center min-h-screen items-center gap-8 bg-dark">
      {/* Left Side */}
      <div className="flex flex-col gap-8 w-[350px]">
        <div className="card-glass p-6">
          <h2 className="text-2xl font-bold text-white mb-4">Upload your Data</h2>
          <div className="bg-white/10 rounded-xl p-6 text-center text-gray-300 border border-white/10">
            Drag and drop a file here,<br />or click to browse
          </div>
          <div className="text-xs mt-3 text-gray-400 text-center">
            CSV and XLSX files are supported
          </div>
        </div>
        <div className="card-glass p-6">
          <h2 className="text-2xl font-bold text-white mb-4">Ask Copilot</h2>
          <input
            className="bg-white/10 text-white/80 rounded-xl mb-4 p-3 w-full"
            placeholder="Type your analytics query..."
            value={input}
            onChange={e => setInput(e.target.value)}
          />
          <button className="w-full bg-blue-600 rounded-xl shadow-md hover:bg-blue-500 transition p-2 font-semibold">
            Send
          </button>
        </div>
      </div>
      {/* Right Side */}
      <div className="card-glass w-[400px] p-6">
        <h2 className="text-2xl font-bold text-white mb-4">Agent Workflow</h2>
        <AgentList />
      </div>
    </div>
  );
}
```

---

## 5️⃣ `pages/index.tsx`

```tsx
import Dashboard from "../components/Dashboard";

export default function Home() {
  return <Dashboard />;
}
```

---

## 6️⃣ Install Lucide Icons

```bash
npm install lucide-react
```

---

## **How to Run**

1. Place all code as above (`AgentList.tsx` and `Dashboard.tsx` in `components`, styles in `globals.css`, etc).
2. Run `npm run dev`
3. Go to [http://localhost:3000](http://localhost:3000)

---

**That’s it! You have the exact same glassmorphic UI, pixel-perfect and scalable.**

Let me know if you want:

* Drag-and-drop functionality
* Agent dropdown expansion
* Mobile responsiveness
* Or glossy/3D animation effects!
-----------


Awesome! Here’s a **full solution with**:

* **Drag-and-drop file upload** (visual highlight on drag, file preview)
* **Agent dropdown expansion** (expand/collapse with animation per agent)
* **Glossy/3D-like effects and subtle transitions** (with Tailwind + Framer Motion)
* **Everything is modular and in plain React/Next.js + Tailwind + [framer-motion](https://www.framer.com/motion/) + [lucide-react](https://lucide.dev/)**

---

## 1️⃣ **Install dependencies**

```bash
npm install framer-motion lucide-react
```

---

## 2️⃣ **components/AgentList.tsx** (expand/collapse with Framer Motion)

```tsx
import { useState } from "react";
import {
  Database, FileText, Settings, MessageCircle, BarChart,
  Lightbulb, FileChart, Wand2, Users, BookOpen, User, ChevronDown, ChevronUp
} from "lucide-react";
import { AnimatePresence, motion } from "framer-motion";

const agents = [
  { icon: <Database size={20} />, name: "Data Agent", description: "Handles file ingestion and structuring." },
  { icon: <FileText size={20} />, name: "Cleaner Agent", description: "Cleans and preprocesses your data." },
  { icon: <Settings size={20} />, name: "Planning Agent", description: "Plans query execution and selects agents." },
  { icon: <MessageCircle size={20} />, name: "Query Agent", description: "Executes natural language and SQL queries." },
  { icon: <BarChart size={20} />, name: "SQL Agent", description: "Runs advanced SQL on your data." },
  { icon: <Lightbulb size={20} />, name: "Insight Agent", description: "Finds key trends and patterns." },
  { icon: <FileChart size={20} />, name: "Chart Agent", description: "Creates charts and visualizations." },
  { icon: <Wand2 size={20} />, name: "Critique Agent", description: "Reviews outputs for accuracy and bias." },
  { icon: <Users size={20} />, name: "Debate Agent", description: "Enables agent collaboration and debate." },
  { icon: <BookOpen size={20} />, name: "Narrative Agent", description: "Generates natural language narratives." },
  { icon: <User size={20} />, name: "Report Agent", description: "Compiles the final report." },
];

export default function AgentList() {
  const [openIndex, setOpenIndex] = useState<number | null>(null);

  return (
    <div className="flex flex-col gap-3">
      {agents.map((agent, idx) => (
        <div key={agent.name}>
          <button
            className={`flex items-center justify-between w-full bg-white/10 p-3 rounded-xl shadow-sm transition cursor-pointer hover:bg-white/20 border border-transparent focus:border-blue-500 outline-none`}
            onClick={() => setOpenIndex(openIndex === idx ? null : idx)}
            aria-expanded={openIndex === idx}
            aria-controls={`agent-desc-${idx}`}
          >
            <div className="flex items-center gap-2 text-white/80">
              {agent.icon}
              <span>{agent.name}</span>
            </div>
            {openIndex === idx ? (
              <ChevronUp className="w-4 h-4 text-blue-400 transition" />
            ) : (
              <ChevronDown className="w-4 h-4 text-white/60 transition" />
            )}
          </button>
          <AnimatePresence>
            {openIndex === idx && (
              <motion.div
                id={`agent-desc-${idx}`}
                key="desc"
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.23 }}
                className="overflow-hidden"
              >
                <div className="bg-gradient-to-r from-blue-900/40 to-blue-700/10 rounded-b-xl px-4 py-3 text-white/70 text-sm shadow-inner">
                  {agent.description}
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      ))}
    </div>
  );
}
```

---

## 3️⃣ **components/Dropzone.tsx** (drag-and-drop with preview + glossy/3D effect)

```tsx
import { useRef, useState } from "react";
import { FileText } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function Dropzone() {
  const [dragActive, setDragActive] = useState(false);
  const [fileName, setFileName] = useState<string | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(e.type === "dragover");
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      setFileName(e.dataTransfer.files[0].name);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFileName(e.target.files[0].name);
    }
  };

  return (
    <motion.div
      layout
      className={`relative bg-white/10 rounded-xl p-6 border border-white/10 flex flex-col items-center justify-center text-center cursor-pointer transition shadow-md
        ${dragActive ? "ring-4 ring-blue-400/50 border-blue-300/30 scale-105 shadow-lg" : ""}
      `}
      onDragOver={handleDrag}
      onDragEnter={handleDrag}
      onDragLeave={handleDrag}
      onDrop={handleDrop}
      onClick={() => inputRef.current?.click()}
      style={{
        boxShadow: dragActive
          ? "0 12px 36px 0 rgba(20,160,255,0.18)"
          : "0 8px 32px 0 rgba(31, 38, 135, 0.13)",
        transition: "box-shadow 0.18s, scale 0.18s",
        background: dragActive
          ? "linear-gradient(120deg, #1647ff11 0%, #00e0ff22 100%)"
          : undefined,
      }}
    >
      <FileText size={36} className={`mx-auto mb-2 text-blue-400 drop-shadow-glow`} />
      <span className="text-gray-100 font-medium text-base">
        {fileName
          ? (
            <>
              <span className="text-blue-300">{fileName}</span><br />
              <span className="text-xs text-gray-400">Uploaded</span>
            </>
          )
          : <>Drag and drop a file here,<br />or click to browse</>
        }
      </span>
      <input
        ref={inputRef}
        type="file"
        className="hidden"
        accept=".csv,.xlsx"
        onChange={handleChange}
      />
      <span className="text-xs mt-3 text-gray-400 text-center">
        CSV and XLSX files are supported
      </span>
      <AnimatePresence>
        {dragActive && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 0.6 }}
            exit={{ opacity: 0 }}
            className="absolute inset-0 rounded-xl pointer-events-none"
            style={{
              background:
                "linear-gradient(120deg, #0cf 30%, #2189ff 70%)",
              filter: "blur(12px)",
            }}
          />
        )}
      </AnimatePresence>
    </motion.div>
  );
}
```

---

## 4️⃣ **components/Dashboard.tsx** (glossy/3D effects and layout)

```tsx
import { useState } from "react";
import AgentList from "./AgentList";
import Dropzone from "./Dropzone";
import { motion } from "framer-motion";

export default function Dashboard() {
  const [input, setInput] = useState("");

  return (
    <div className="flex flex-row justify-center min-h-screen items-center gap-8 bg-dark">
      {/* Left Side */}
      <div className="flex flex-col gap-8 w-[350px]">
        <motion.div
          className="card-glass p-6"
          whileHover={{ scale: 1.025, boxShadow: "0 12px 36px 0 rgba(0,176,255,0.12)" }}
          transition={{ duration: 0.22 }}
        >
          <h2 className="text-2xl font-bold text-white mb-4 tracking-tight">Upload your Data</h2>
          <Dropzone />
        </motion.div>
        <motion.div
          className="card-glass p-6"
          whileHover={{ scale: 1.025, boxShadow: "0 12px 36px 0 rgba(0,176,255,0.09)" }}
          transition={{ duration: 0.22 }}
        >
          <h2 className="text-2xl font-bold text-white mb-4 tracking-tight">Ask Copilot</h2>
          <input
            className="bg-white/10 text-white/80 rounded-xl mb-4 p-3 w-full shadow-inner focus:ring-2 focus:ring-blue-400"
            placeholder="Type your analytics query..."
            value={input}
            onChange={e => setInput(e.target.value)}
          />
          <button className="w-full bg-gradient-to-r from-blue-600 to-cyan-500 rounded-xl shadow-md hover:brightness-110 transition p-2 font-semibold text-white text-base active:scale-95">
            Send
          </button>
        </motion.div>
      </div>
      {/* Right Side */}
      <motion.div
        className="card-glass w-[400px] p-6"
        whileHover={{ scale: 1.012, boxShadow: "0 12px 36px 0 rgba(0,176,255,0.10)" }}
        transition={{ duration: 0.22 }}
      >
        <h2 className="text-2xl font-bold text-white mb-4 tracking-tight">Agent Workflow</h2>
        <AgentList />
      </motion.div>
    </div>
  );
}
```

---

## 5️⃣ **pages/index.tsx**

```tsx
import Dashboard from "../components/Dashboard";

export default function Home() {
  return <Dashboard />;
}
```

---

## 6️⃣ **styles/globals.css** (glossy/3D extra tweaks)

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  background: #181b20;
  color: #fff;
  min-height: 100vh;
}

.card-glass {
  background: rgba(255,255,255,0.07);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.18), 0 1.5px 0.5px 0 rgba(100,255,255,0.02);
  backdrop-filter: blur(18px);
  border-radius: 1.5rem;
  border: 1px solid rgba(255,255,255,0.11);
  position: relative;
  overflow: hidden;
}
.card-glass::before {
  content: "";
  position: absolute;
  left: 12%;
  top: 2px;
  width: 76%;
  height: 32px;
  border-radius: 48px;
  background: linear-gradient(90deg, rgba(255,255,255,0.13), rgba(255,255,255,0.04));
  filter: blur(4px);
  pointer-events: none;
}
```

---

## **That’s it!**

* **Drag-and-drop file upload** is fully interactive/glossy.
* **Agent panel** is expandable with animation and unique content per agent.
* **All cards and inputs** have subtle 3D/hover/shine/glass effects.
* **Framer Motion** adds smooth transitions and “living” UI.

---

Let me know if you want:

* Backend file upload handling
* Real-time agent logs
* Even more 3D icons or animations
* Mobile responsiveness or further customizations

Just say “add X” and I’ll generate code for you!
Here’s a **comprehensive checklist** and a few **optional power-ups** to take your glassmorphic, interactive LLM dashboard UI **from ready to MAANG-grade, production-ready, and even demo-able**.

---

## ✅ **Essentials for Your Project**

1. **All files in place:**

   * `/components/AgentList.tsx`
   * `/components/Dropzone.tsx`
   * `/components/Dashboard.tsx`
   * `/pages/index.tsx`
   * `/styles/globals.css`
   * `tailwind.config.js`

2. **Dependencies installed:**

   ```bash
   npm install tailwindcss postcss autoprefixer
   npx tailwindcss init -p
   npm install lucide-react
   npm install framer-motion
   ```

   (and of course: `npm install` to install core Next.js)

3. **Tailwind set up**

   * Make sure your `tailwind.config.js` points to `components/**/*.{js,ts,jsx,tsx}` and `pages/**/*.{js,ts,jsx,tsx}`.

4. **Global CSS included in `_app.tsx`**

   ```tsx
   // pages/_app.tsx
   import "../styles/globals.css";
   export default function App({ Component, pageProps }) {
     return <Component {...pageProps} />;
   }
   ```

   *If you used the default Next.js starter, this is already present.*

5. **Dev server running:**

   ```bash
   npm run dev
   ```

   Open [http://localhost:3000](http://localhost:3000).

---

## ⚡ **Recommended Next Steps / Add-ons**

* **Mobile responsiveness:**
  Add `max-w-[95vw]` to card containers and use Tailwind’s `sm:`, `md:`, `lg:` classes for layouts.

* **Accessibility:**

  * Use semantic elements: `<button>`, `<input>`, `aria-*` as in code above.
  * Add keyboard navigation/focus rings.

* **Demo/test with real data:**

  * Connect the Dropzone to a backend API for upload.
  * Use agent expanders to show dummy logs or output.

* **Optional: Add favicon/logo and meta tags**
  In `/public` add your own `favicon.ico`.
  In `/pages/_document.tsx` or `/pages/_app.tsx` add meta tags for SEO/sharing.

* **Optional: shadcn/ui for even more polished UI primitives**

  ```bash
  npx shadcn-ui@latest init
  npx shadcn-ui@latest add card input button
  ```

  Swap these into your code for even faster, accessible UI.

* **Version control:**

  ```
  git init
  git add .
  git commit -m "Initial UI for Enterprise Insights Copilot"
  ```

---

## 🧪 **Testing / Final Checklist**

* [ ] Run `npm run dev` and verify the UI is glassy and interactive.
* [ ] Try agent expand/collapse—are the animations smooth?
* [ ] Try drag-and-drop upload—does the visual feedback work?
* [ ] UI looks sharp on both dark and light monitors?
* [ ] No errors in browser console?
* [ ] UI still crisp and usable at 80-90% and 110-125% zoom?
* [ ] (Optional) Run `npm run build` and `npm start` to test production build.

---

## 🤖 **Next-gen Features You Can Add Later**

* Real file processing and upload to backend or S3
* LLM API integration for Copilot chat
* Agent status with colored glow, animated progress, or real-time logs
* Theme switch (dark/light)
* User profile or login flow
* Real data visualizations

---

## 💡 **If you get stuck...**

* Error in console? Paste it here, I’ll debug for you.
* Want a feature? Just say “Add \[feature]” and I’ll generate code instantly.

---

**You’re all set for a world-class frontend UI.**
Ready to build or demo! 🚀
